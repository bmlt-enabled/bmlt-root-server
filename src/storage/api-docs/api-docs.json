{
    "openapi": "3.0.0",
    "info": {
        "title": "BMLT - OpenAPI 3.0",
        "description": "BMLT Admin API Documentation",
        "license": {
            "name": "MIT",
            "url": "https://github.com/bmlt-enabled/bmlt-root-server/blob/main/LICENSE"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://latest.aws.bmlt.app/main_server",
            "description": "BMLT Admin API Latest Server"
        },
        {
            "url": "https://unstable.aws.bmlt.app/main_server",
            "description": "BMLT Admin API Unstable Server"
        },
        {
            "url": "https://gyro.sezf.org/main_server",
            "description": "BMLT Admin API Gyro Server"
        },
        {
            "url": "http://localhost:8000/main_server",
            "description": "BMLT Admin API Local Server"
        }
    ],
    "paths": {
        "/api/v1/formats": {
            "get": {
                "tags": [
                    "formats"
                ],
                "summary": "Retrieve formats",
                "description": "Retrieve formats for server.",
                "operationId": "getFormats",
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GetFormatsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "formats"
                ],
                "summary": "Create Format",
                "description": "Cretaes a format.",
                "operationId": "createFormat",
                "requestBody": {
                    "description": "Pass in format object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "translations"
                                ],
                                "properties": {
                                    "worldId": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "translations": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/FormatLangModel"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns when POST is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FormatResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The translations.0.key field is required. (and 1 more error)"
                                        },
                                        "errors": {
                                            "properties": {
                                                "translations.0.key": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The translations.0.key field is required."
                                                    }
                                                },
                                                "translations.0.name": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The translations.0.name field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorIncorrectCredentials"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/formats/{formatId}": {
            "get": {
                "tags": [
                    "formats"
                ],
                "summary": "Retrieve a single format",
                "description": "Retrieve single format.",
                "operationId": "getSingleFormat",
                "parameters": [
                    {
                        "name": "formatId",
                        "in": "path",
                        "description": "ID of format",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns with successful request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "example": "0"
                                        },
                                        "worldId": {
                                            "type": "string",
                                            "example": "string"
                                        },
                                        "type": {
                                            "type": "string",
                                            "example": "string"
                                        },
                                        "translations": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/FormatLangModel"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "formats"
                ],
                "summary": "Update single format",
                "description": "Updates a single format.",
                "operationId": "updateFormat",
                "parameters": [
                    {
                        "name": "formatId",
                        "in": "path",
                        "description": "ID of format",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in format object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FormatResponse"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Returns when PUT is successful."
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The translations.0.key field is required. (and 1 more error)"
                                        },
                                        "errors": {
                                            "properties": {
                                                "translations.0.key": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The translations.0.key field is required."
                                                    }
                                                },
                                                "translations.0.name": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The translations.0.name field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorIncorrectCredentials"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "formats"
                ],
                "summary": "Deletes a single format",
                "description": "Deletes a single format by id.",
                "operationId": "deleteFormat",
                "parameters": [
                    {
                        "name": "formatId",
                        "in": "path",
                        "description": "ID of format",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Returns with successful request."
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthorized"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no format for id exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "No query results for model [App\\\\Models\\\\Format]"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "formats"
                ],
                "summary": "Patches a single format",
                "description": "Patches a single format by id.",
                "operationId": "patchFormat",
                "parameters": [
                    {
                        "name": "formatId",
                        "in": "path",
                        "description": "ID of format",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in format attributes.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FormatResponse"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Returns with successful request."
                    },
                    "401": {
                        "description": "Returns when not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "$ref": "#/components/schemas/ErrorUnauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no service body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoFormatExists"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/meetings": {
            "get": {
                "tags": [
                    "meetings"
                ],
                "summary": "Retrieve meetings",
                "description": "Retrieve meetings for authenticated user.",
                "operationId": "getMeetings",
                "parameters": [
                    {
                        "name": "meetingIds",
                        "in": "query",
                        "description": "int delimited",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1,2"
                    },
                    {
                        "name": "days",
                        "in": "query",
                        "description": "int delimited",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "0,1"
                    },
                    {
                        "name": "serviceBodyIds",
                        "in": "query",
                        "description": "int delimited",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3,4"
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "string",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Just for Today"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeetingsResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "meetings"
                ],
                "summary": "Create Meeting",
                "description": "Cretaes a meeting.",
                "operationId": "createMeeting",
                "requestBody": {
                    "description": "Pass in meeting object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MeetingTemplate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns when POST is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeetingResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The latitude must be a number."
                                        },
                                        "errors": {
                                            "properties": {
                                                "latitude": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The latitude must be a number."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthorized"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/meetings/{meetingId}": {
            "get": {
                "tags": [
                    "meetings"
                ],
                "summary": "Retrieve a single meeting",
                "description": "Retrieve single meeting.",
                "operationId": "getSingleMeeting",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "ID of meeting",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns with successful request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeetingResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthorized"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no format exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoMeetingExists"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "meetings"
                ],
                "summary": "Update single meeting",
                "description": "Updates a single meeting.",
                "operationId": "updateMeeting",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "ID of meeting",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in meeting object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MeetingTemplate"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Returns when PUT is successful."
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The latitude must be a number."
                                        },
                                        "errors": {
                                            "properties": {
                                                "latitude": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The latitude must be a number."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorIncorrectCredentials"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no meeting exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoMeetingExists"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "meetings"
                ],
                "summary": "Deletes a single meeting",
                "description": "Deletes a single meeting by id.",
                "operationId": "deleteMeeting",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "ID of meeting",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Returns with successful request."
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthorized"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no meeting for id exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoMeetingExists"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "meetings"
                ],
                "summary": "Patches a single meeting",
                "description": "Patches a single meeting by id",
                "operationId": "patchMeeting",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "ID of meeting",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in meeting attributes",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Returns with successful request."
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthorized"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no meeting exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoMeetingExists"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/servicebodies": {
            "get": {
                "tags": [
                    "servicebodies"
                ],
                "summary": "Retrieve service bodies",
                "description": "Retrieve service bodies for authenticated user.",
                "operationId": "getServiceBodies",
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceBodiesResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "servicebodies"
                ],
                "summary": "Create Service Body",
                "description": "Cretaes a service body.",
                "operationId": "createServiceBody",
                "requestBody": {
                    "description": "Pass in service body object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "name",
                                    "description"
                                ],
                                "properties": {
                                    "parentId": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "adminUserId": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "assignedUserIds": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": "0"
                                        }
                                    },
                                    "url": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "helpline": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "worldId": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns when POST is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceBodyResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The parent id field must be present. (and 1 more error)"
                                        },
                                        "errors": {
                                            "properties": {
                                                "parentId": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The parent id field must be present."
                                                    }
                                                },
                                                "assignedUserIds": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The editor user ids field must be present."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorIncorrectCredentials"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/servicebodies/{serviceBodyId}": {
            "get": {
                "tags": [
                    "servicebodies"
                ],
                "summary": "Retrieve a single service body",
                "description": "Retrieve a single service body by id.",
                "operationId": "getServiceBody",
                "parameters": [
                    {
                        "name": "serviceBodyId",
                        "in": "path",
                        "description": "ID of service body",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceBodyResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "$ref": "#/components/schemas/ErrorUnauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "$ref": "#/components/schemas/ErrorUnauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no service body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoServiceBodyExists"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "servicebodies"
                ],
                "summary": "Update single Service Body",
                "description": "Updates a single service body.",
                "operationId": "updateServiceBody",
                "parameters": [
                    {
                        "name": "serviceBodyId",
                        "in": "path",
                        "description": "ID of service body",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in service body object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "parentId": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "name": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "adminUserId": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "assignedUserIds": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": "0"
                                        }
                                    },
                                    "url": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "helpline": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "worldId": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Returns when PUT is successful."
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The parent id field must be present. (and 1 more error)"
                                        },
                                        "errors": {
                                            "properties": {
                                                "parentId": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The parent id field must be present."
                                                    }
                                                },
                                                "assignedUserIds": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The editor user ids field must be present."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorIncorrectCredentials"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "servicebodies"
                ],
                "summary": "Deletes a single service body",
                "description": "Deletes a single service body by id.",
                "operationId": "deleteServiceBody",
                "parameters": [
                    {
                        "name": "serviceBodyId",
                        "in": "path",
                        "description": "ID of service body",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Returns with successful request."
                    },
                    "401": {
                        "description": "Returns when not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "$ref": "#/components/schemas/ErrorUnauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "$ref": "#/components/schemas/ErrorUnauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no service body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoServiceBodyExists"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Returns when service body has dependant resources.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "You cannot delete a service body while other service bodies or meetings are assigned to it."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "servicebodies"
                ],
                "summary": "Patches a single service body",
                "description": "Patches a single service body by id.",
                "operationId": "patchServiceBody",
                "parameters": [
                    {
                        "name": "serviceBodyId",
                        "in": "path",
                        "description": "ID of service body",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in service body attributes.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "assignedUserIds": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer",
                                            "example": "0"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Returns with successful request."
                    },
                    "401": {
                        "description": "Returns when not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "$ref": "#/components/schemas/ErrorUnauthenticated"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "$ref": "#/components/schemas/ErrorUnauthorized"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no service body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoServiceBodyExists"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Refresh Token",
                "description": "Refresh token.",
                "operationId": "authRefresh",
                "responses": {
                    "200": {
                        "description": "Returns when token is valid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "access_token": {
                                            "type": "string",
                                            "example": "2|tR6PIqa8tiBJWMu4zyb3qw4eECuERjLd7xeLKgBu"
                                        },
                                        "expires_at": {
                                            "type": "integer",
                                            "example": "1667342171"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "bearer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when token is invalid or missing.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/auth/token": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Retrieve Token",
                "description": "Retrieve token by username, password.",
                "operationId": "authToken",
                "requestBody": {
                    "description": "Pass user credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "username",
                                    "password"
                                ],
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "format": "username",
                                        "example": "MyUsername"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "example": "PassWord12345"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "access_token": {
                                            "type": "string",
                                            "example": "2|tR6PIqa8tiBJWMu4zyb3qw4eECuERjLd7xeLKgBu"
                                        },
                                        "expires_at": {
                                            "type": "integer",
                                            "example": "1667342171"
                                        },
                                        "token_type": {
                                            "type": "string",
                                            "example": "bearer"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The username field is required. (and 1 more error)"
                                        },
                                        "errors": {
                                            "properties": {
                                                "username": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The email field is required."
                                                    }
                                                },
                                                "password": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The password field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorIncorrectCredentials"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "tags": [
                    "auth"
                ],
                "summary": "Revoke Token",
                "description": "Revoke token and logout.",
                "operationId": "authLogout",
                "responses": {
                    "200": {
                        "description": "Returns when token is valid."
                    },
                    "401": {
                        "description": "Returns when token is invalid or missing.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Unauthenticated."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Retrieve users",
                "description": "Retrieve users for authenticated user.",
                "operationId": "getUsers",
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsersResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create User",
                "description": "Cretaes a user.",
                "operationId": "createUser",
                "requestBody": {
                    "description": "Pass in user object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "username",
                                    "password"
                                ],
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "displayName": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "ownerId": {
                                        "type": "string",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns when POST is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The username field is required. (and 1 more error)"
                                        },
                                        "errors": {
                                            "properties": {
                                                "username": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The username field is required."
                                                    }
                                                },
                                                "password": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The password field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorIncorrectCredentials"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/users/{userId}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Retrieve a single user",
                "description": "Retrieve single user.",
                "operationId": "getSingleUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no user exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoUserExists"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update single user",
                "description": "Updates a single user.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in user object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "username",
                                    "password"
                                ],
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "type": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "displayName": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "email": {
                                        "type": "string",
                                        "example": "string"
                                    },
                                    "ownerId": {
                                        "type": "string",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Returns when PUT is successful."
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "The username field is required. (and 1 more error)"
                                        },
                                        "errors": {
                                            "properties": {
                                                "username": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The username field is required."
                                                    }
                                                },
                                                "password": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string",
                                                        "example": "The password field is required."
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorIncorrectCredentials"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no service body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoUserExists"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Deletes a single user",
                "description": "Deletes a single user by id",
                "operationId": "deleteUSer",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Returns with successful request."
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthorized"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no service body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoUserExists"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "users"
                ],
                "summary": "Patches a single user",
                "description": "Patches a single user by id",
                "operationId": "patchUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in user attributes",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Returns with successful request."
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthenticated"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorUnauthorized"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no service body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NoUserExists"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ErrorIncorrectCredentials": {
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "The provided credentials are incorrect."
                    }
                },
                "type": "object"
            },
            "ErrorUnauthenticated": {
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Unauthenticated."
                    }
                },
                "type": "object"
            },
            "ErrorUnauthorized": {
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "This action is unauthorized."
                    }
                },
                "type": "object"
            },
            "FormatResponse": {
                "properties": {
                    "worldId": {
                        "type": "string",
                        "example": "string"
                    },
                    "type": {
                        "type": "string",
                        "example": "string"
                    },
                    "translations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormatLangModel"
                        }
                    }
                },
                "type": "object"
            },
            "FormatLangModel": {
                "required": [
                    "key",
                    "name",
                    "description",
                    "language"
                ],
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "NoFormatExists": {
                "description": "Returns when no format exists.",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "No query results for model [App\\\\Models\\\\Format]"
                    }
                },
                "type": "object"
            },
            "GetFormatsResponse": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/FormatResponse"
                },
                "example": [
                    {
                        "id": 0,
                        "worldId": "string",
                        "type": "string",
                        "translations": {
                            "key": "string",
                            "name": "string",
                            "description": "string",
                            "language": "string"
                        }
                    }
                ]
            },
            "MeetingTemplate": {
                "properties": {
                    "serviceBodyId": {
                        "type": "integer",
                        "example": "0"
                    },
                    "formatIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "venueType": {
                        "type": "integer",
                        "example": "1"
                    },
                    "temporarilyVirtual": {
                        "type": "boolean",
                        "example": "false"
                    },
                    "day": {
                        "type": "integer",
                        "example": "0"
                    },
                    "startTime": {
                        "type": "string",
                        "example": "string"
                    },
                    "duration": {
                        "type": "string",
                        "example": "01:00"
                    },
                    "timeZone": {
                        "type": "string",
                        "example": "America/New_York"
                    },
                    "latitude": {
                        "type": "number",
                        "format": "float",
                        "example": "35.698741"
                    },
                    "longitude": {
                        "type": "number",
                        "format": "float",
                        "example": "-81.26273"
                    },
                    "published": {
                        "type": "boolean",
                        "example": "true"
                    },
                    "email": {
                        "type": "string",
                        "example": "string"
                    },
                    "worldId": {
                        "type": "string",
                        "example": "string"
                    },
                    "name": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_text": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_info": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_street": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_neighborhood": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_city_subsection": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_municipality": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_sub_province": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_province": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_postal_code_1": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_nation": {
                        "type": "string",
                        "example": "string"
                    },
                    "phone_meeting_number": {
                        "type": "string",
                        "example": "string"
                    },
                    "virtual_meeting_link": {
                        "type": "string",
                        "example": "string"
                    },
                    "virtual_meeting_additional_info": {
                        "type": "string",
                        "example": "string"
                    },
                    "contact_name_1": {
                        "type": "string",
                        "example": "string"
                    },
                    "contact_name_2": {
                        "type": "string",
                        "example": "string"
                    },
                    "contact_phone_1": {
                        "type": "string",
                        "example": "string"
                    },
                    "contact_phone_2": {
                        "type": "string",
                        "example": "string"
                    },
                    "contact_email_1": {
                        "type": "string",
                        "example": "string"
                    },
                    "contact_email_2": {
                        "type": "string",
                        "example": "string"
                    },
                    "bus_lines": {
                        "type": "string",
                        "example": "string"
                    },
                    "train_line": {
                        "type": "string",
                        "example": "string"
                    },
                    "comments": {
                        "type": "string",
                        "example": "string"
                    }
                },
                "type": "object"
            },
            "NoMeetingExists": {
                "description": "Returns when no Meeting exists.",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "No query results for model [App\\\\Models\\\\Meeting]"
                    }
                },
                "type": "object"
            },
            "MeetingsResponse": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/MeetingResponse"
                }
            },
            "MeetingResponse": {
                "allOf": [
                    {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": "0"
                            }
                        },
                        "type": "object"
                    },
                    {
                        "$ref": "#/components/schemas/MeetingTemplate"
                    }
                ]
            },
            "ServiceBodyResponse": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "0"
                    },
                    "parentId": {
                        "type": "integer",
                        "example": "0"
                    },
                    "name": {
                        "type": "string",
                        "example": "string"
                    },
                    "description": {
                        "type": "string",
                        "example": "string"
                    },
                    "type": {
                        "type": "string",
                        "example": "string"
                    },
                    "adminUserId": {
                        "type": "integer",
                        "example": "0"
                    },
                    "assignedUserIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": "0"
                        }
                    },
                    "url": {
                        "type": "string",
                        "example": "string"
                    },
                    "helpline": {
                        "type": "string",
                        "example": "string"
                    },
                    "email": {
                        "type": "string",
                        "example": "string"
                    },
                    "worldId": {
                        "type": "string",
                        "example": "string"
                    }
                },
                "type": "object"
            },
            "ServiceBodiesResponse": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ServiceBodyResponse"
                },
                "example": [
                    {
                        "id": 0,
                        "parentId": 0,
                        "name": "string",
                        "description": "string",
                        "type": "string",
                        "adminUserId": 0,
                        "assignedUserIds": [
                            1
                        ],
                        "url": "string",
                        "helpline": "string",
                        "email": "string",
                        "worldId": "string"
                    }
                ]
            },
            "NoServiceBodyExists": {
                "description": "Returns when no user exists.",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "No query results for model [App\\\\Models\\\\ServiceBody]"
                    }
                },
                "type": "object"
            },
            "UserResponse": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "0"
                    },
                    "username": {
                        "type": "string",
                        "example": "string"
                    },
                    "type": {
                        "type": "string",
                        "example": "string"
                    },
                    "displayName": {
                        "type": "string",
                        "example": "string"
                    },
                    "description": {
                        "type": "string",
                        "example": "string"
                    },
                    "email": {
                        "type": "string",
                        "example": "string"
                    },
                    "ownerId": {
                        "type": "string",
                        "example": "0"
                    }
                },
                "type": "object"
            },
            "UsersResponse": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/UserResponse"
                },
                "example": [
                    {
                        "id": 1,
                        "username": "string",
                        "type": "string",
                        "displayName": "string",
                        "description": "string",
                        "email": "string",
                        "ownerId": 0
                    }
                ]
            },
            "NoUserExists": {
                "description": "Returns when no user exists.",
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "No query results for model [App\\\\Models\\\\User]"
                    }
                },
                "type": "object"
            }
        },
        "responses": {
            "401": {
                "description": "Returns when not authenticated.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ErrorUnauthenticated"
                        }
                    }
                }
            },
            "404": {
                "description": "Returns when no format exists.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/NoFormatExists"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "oauth2",
                "flows": {
                    "password": {
                        "tokenUrl": "main_server/api/v1/auth/token",
                        "refreshUrl": "main_server/api/v1/auth/refresh",
                        "scopes": {}
                    }
                }
            }
        }
    }
}