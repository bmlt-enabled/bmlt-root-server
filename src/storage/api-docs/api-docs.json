{
    "openapi": "3.0.0",
    "info": {
        "title": "BMLT",
        "description": "BMLT Admin API Documentation",
        "license": {
            "name": "MIT",
            "url": "https://github.com/bmlt-enabled/bmlt-root-server/blob/main/LICENSE"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/v1/errortest": {
            "post": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Tests some errors",
                "description": "Tests some errors.",
                "operationId": "createErrorTest",
                "requestBody": {
                    "description": "Pass in error test object.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ErrorTest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns when POST is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorTest"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Server error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServerError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            }
        },
        "/api/v1/formats": {
            "get": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Retrieves formats",
                "description": "Retrieve formats",
                "operationId": "getFormats",
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FormatCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Creates a format",
                "description": "Creates a format.",
                "operationId": "createFormat",
                "requestBody": {
                    "description": "Pass in format object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FormatCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns when POST is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Format"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no format exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            }
        },
        "/api/v1/formats/{formatId}": {
            "get": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Retrieves a format",
                "description": "Retrieve a format",
                "operationId": "getFormat",
                "parameters": [
                    {
                        "name": "formatId",
                        "in": "path",
                        "description": "ID of format",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Format"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no format exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Updates a format",
                "description": "Updates a format.",
                "operationId": "updateFormat",
                "parameters": [
                    {
                        "name": "formatId",
                        "in": "path",
                        "description": "ID of format",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in format object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FormatUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no format exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Deletes a format",
                "description": "Deletes a format by id.",
                "operationId": "deleteFormat",
                "parameters": [
                    {
                        "name": "formatId",
                        "in": "path",
                        "description": "ID of format",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no format exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Patches a format",
                "description": "Patches a single format by id.",
                "operationId": "patchFormat",
                "parameters": [
                    {
                        "name": "formatId",
                        "in": "path",
                        "description": "ID of format",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in fields you want to update.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FormatPartialUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no format exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            }
        },
        "/api/v1/meetings": {
            "get": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Retrieves meetings",
                "description": "Retrieve meetings for authenticated user.",
                "operationId": "getMeetings",
                "parameters": [
                    {
                        "name": "meetingIds",
                        "in": "query",
                        "description": "comma delimited meeting ids",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "1,2"
                    },
                    {
                        "name": "days",
                        "in": "query",
                        "description": "comma delimited day ids between 0-6",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "0,1"
                    },
                    {
                        "name": "serviceBodyIds",
                        "in": "query",
                        "description": "comma delimited service body ids",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "3,4"
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "description": "string",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "Just for Today"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of meetings.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MeetingCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Creates a meeting",
                "description": "Creates a meeting.",
                "operationId": "createMeeting",
                "requestBody": {
                    "description": "Pass in meeting object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MeetingCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns when POST is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Meeting"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no meeting body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            }
        },
        "/api/v1/meetings/{meetingId}": {
            "get": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Retrieves a meeting",
                "description": "Retrieve a meeting.",
                "operationId": "getMeeting",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "ID of meeting",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Meeting"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no meeting exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Updates a meeting",
                "description": "Updates a meeting.",
                "operationId": "updateMeeting",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "ID of meeting",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in meeting object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MeetingUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no meeting exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Deletes a meeting",
                "description": "Deletes a meeting by id.",
                "operationId": "deleteMeeting",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "ID of meeting",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no meeting exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Patches a meeting",
                "description": "Patches a meeting by id",
                "operationId": "patchMeeting",
                "parameters": [
                    {
                        "name": "meetingId",
                        "in": "path",
                        "description": "ID of meeting",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in fields you want to update.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MeetingPartialUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no meeting exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            }
        },
        "/api/v1/rootservers": {
            "get": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Retrieves root servers",
                "description": "Retrieve root servers.",
                "operationId": "getRootServers",
                "responses": {
                    "200": {
                        "description": "Successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RootServerCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when aggregator mode is disabled.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/rootservers/{rootServerId}": {
            "get": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Retrieves a root server",
                "description": "Retrieve a single root server id.",
                "operationId": "getRootServer",
                "parameters": [
                    {
                        "name": "rootServerId",
                        "in": "path",
                        "description": "ID of root server",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RootServer"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no root server exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/servicebodies": {
            "get": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Retrieves service bodies",
                "description": "Retrieve service bodies for authenticated user.",
                "operationId": "getServiceBodies",
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceBodyCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Creates a service body",
                "description": "Creates a service body.",
                "operationId": "createServiceBody",
                "requestBody": {
                    "description": "Pass in service body object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceBodyCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns when POST is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceBody"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no service body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            }
        },
        "/api/v1/servicebodies/{serviceBodyId}": {
            "get": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Retrieves a service body",
                "description": "Retrieve a single service body by id.",
                "operationId": "getServiceBody",
                "parameters": [
                    {
                        "name": "serviceBodyId",
                        "in": "path",
                        "description": "ID of service body",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceBody"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no service body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Updates a Service Body",
                "description": "Updates a single service body.",
                "operationId": "updateServiceBody",
                "parameters": [
                    {
                        "name": "serviceBodyId",
                        "in": "path",
                        "description": "ID of service body",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in service body object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceBodyUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no service body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Deletes a service body",
                "description": "Deletes a service body by id.",
                "operationId": "deleteServiceBody",
                "parameters": [
                    {
                        "name": "serviceBodyId",
                        "in": "path",
                        "description": "ID of service body",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no service body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Returns when service body has children.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Patches a service body",
                "description": "Patches a single service body by id.",
                "operationId": "patchServiceBody",
                "parameters": [
                    {
                        "name": "serviceBodyId",
                        "in": "path",
                        "description": "ID of service body",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in fields you want to update.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceBodyPartialUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no service body exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            }
        },
        "/api/v1/auth/token": {
            "post": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Creates a token",
                "description": "Exchange credentials for a new token",
                "operationId": "authToken",
                "requestBody": {
                    "description": "User credentials",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TokenCredentials"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns when POST is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when credentials are incorrect.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/v1/auth/refresh": {
            "post": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Revokes and issues a new token",
                "description": "Refresh token.",
                "operationId": "authRefresh",
                "responses": {
                    "200": {
                        "description": "Returns when refresh is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when request is unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            }
        },
        "/api/v1/auth/logout": {
            "post": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Revokes a token",
                "description": "Revoke token and logout.",
                "operationId": "authLogout",
                "responses": {
                    "200": {
                        "description": "Returns when token was logged out."
                    },
                    "401": {
                        "description": "Returns when request is unauthenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            }
        },
        "/api/v1/users": {
            "get": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Retrieves users",
                "description": "Retrieve users for authenticated user.",
                "operationId": "getUsers",
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Creates a user",
                "description": "Creates a user.",
                "operationId": "createUser",
                "requestBody": {
                    "description": "Pass in user object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Returns when POST is successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no user exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            }
        },
        "/api/v1/users/{userId}": {
            "get": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Retrieves a single user",
                "description": "Retrieve single user.",
                "operationId": "getUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns when user is authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Returns when not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no user exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Update single user",
                "description": "Updates a user.",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in user object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "401": {
                        "description": "Returns when user is not authenticated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when user is unauthorized to perform action.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no user exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Deletes a user",
                "description": "Deletes a user by id",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no user exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Returns when user is still referenced by service bodies.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConflictError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            },
            "patch": {
                "tags": [
                    "rootServer"
                ],
                "summary": "Patches a user",
                "description": "Patches a user by id.",
                "operationId": "partialUpdateUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "example": "1"
                    }
                ],
                "requestBody": {
                    "description": "Pass in fields you want to update.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPartialUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success."
                    },
                    "401": {
                        "description": "Returns when not authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationError"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Returns when unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthorizationError"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Returns when no user exists.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotFoundError"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation error.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ValidationError"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "bmltToken": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "ErrorTest": {
                "properties": {
                    "arbitrary_string": {
                        "type": "string",
                        "example": "string"
                    },
                    "arbitrary_int": {
                        "type": "integer",
                        "example": "123"
                    },
                    "force_server_error": {
                        "type": "boolean",
                        "example": "true"
                    }
                },
                "type": "object"
            },
            "AuthenticationError": {
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Unauthenticated."
                    }
                },
                "type": "object"
            },
            "AuthorizationError": {
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "This action is unauthorized."
                    }
                },
                "type": "object"
            },
            "NotFoundError": {
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "The requested resource was not found."
                    }
                },
                "type": "object"
            },
            "ConflictError": {
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Conflict Error"
                    }
                },
                "type": "object"
            },
            "ValidationError": {
                "required": [
                    "message",
                    "errors"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "The field is required. (and 1 more error)"
                    },
                    "errors": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "example": "error details"
                            }
                        }
                    }
                },
                "type": "object"
            },
            "ServerError": {
                "required": [
                    "message"
                ],
                "properties": {
                    "message": {
                        "type": "string",
                        "example": "Server Error"
                    }
                },
                "type": "object"
            },
            "FormatBase": {
                "properties": {
                    "worldId": {
                        "type": "string",
                        "example": "string"
                    },
                    "type": {
                        "type": "string",
                        "example": "string"
                    },
                    "translations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FormatTranslation"
                        }
                    }
                },
                "type": "object"
            },
            "FormatTranslation": {
                "required": [
                    "key",
                    "name",
                    "description",
                    "language"
                ],
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "language": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Format": {
                "required": [
                    "id",
                    "worldId",
                    "type",
                    "translations"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormatBase"
                    },
                    {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": "0"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "FormatCreate": {
                "required": [
                    "translations"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormatBase"
                    }
                ]
            },
            "FormatUpdate": {
                "required": [
                    "translations"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormatBase"
                    }
                ]
            },
            "FormatPartialUpdate": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FormatBase"
                    }
                ]
            },
            "FormatCollection": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Format"
                }
            },
            "MeetingBase": {
                "properties": {
                    "serviceBodyId": {
                        "type": "integer",
                        "example": "0"
                    },
                    "formatIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "venueType": {
                        "type": "integer",
                        "example": "1"
                    },
                    "temporarilyVirtual": {
                        "type": "boolean",
                        "example": "false"
                    },
                    "day": {
                        "type": "integer",
                        "example": "0"
                    },
                    "startTime": {
                        "type": "string",
                        "example": "string"
                    },
                    "duration": {
                        "type": "string",
                        "example": "01:00"
                    },
                    "timeZone": {
                        "type": "string",
                        "example": "America/New_York"
                    },
                    "latitude": {
                        "type": "number",
                        "format": "float",
                        "example": "35.698741"
                    },
                    "longitude": {
                        "type": "number",
                        "format": "float",
                        "example": "-81.26273"
                    },
                    "published": {
                        "type": "boolean",
                        "example": "true"
                    },
                    "email": {
                        "type": "string",
                        "example": "string"
                    },
                    "worldId": {
                        "type": "string",
                        "example": "string"
                    },
                    "name": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_text": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_info": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_street": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_neighborhood": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_city_subsection": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_municipality": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_sub_province": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_province": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_postal_code_1": {
                        "type": "string",
                        "example": "string"
                    },
                    "location_nation": {
                        "type": "string",
                        "example": "string"
                    },
                    "phone_meeting_number": {
                        "type": "string",
                        "example": "string"
                    },
                    "virtual_meeting_link": {
                        "type": "string",
                        "example": "string"
                    },
                    "virtual_meeting_additional_info": {
                        "type": "string",
                        "example": "string"
                    },
                    "contact_name_1": {
                        "type": "string",
                        "example": "string"
                    },
                    "contact_name_2": {
                        "type": "string",
                        "example": "string"
                    },
                    "contact_phone_1": {
                        "type": "string",
                        "example": "string"
                    },
                    "contact_phone_2": {
                        "type": "string",
                        "example": "string"
                    },
                    "contact_email_1": {
                        "type": "string",
                        "example": "string"
                    },
                    "contact_email_2": {
                        "type": "string",
                        "example": "string"
                    },
                    "bus_lines": {
                        "type": "string",
                        "example": "string"
                    },
                    "train_line": {
                        "type": "string",
                        "example": "string"
                    },
                    "comments": {
                        "type": "string",
                        "example": "string"
                    }
                },
                "type": "object"
            },
            "Meeting": {
                "required": [
                    "id",
                    "serviceBodyId",
                    "formatIds",
                    "venueType",
                    "temporarilyVirtual",
                    "day",
                    "startTime",
                    "duration",
                    "timeZone",
                    "latitude",
                    "longitude",
                    "published",
                    "email",
                    "worldId",
                    "name"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MeetingBase"
                    },
                    {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": "0"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "MeetingCreate": {
                "required": [
                    "serviceBodyId",
                    "formatIds",
                    "venueType",
                    "day",
                    "startTime",
                    "duration",
                    "latitude",
                    "longitude",
                    "published",
                    "name"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MeetingBase"
                    }
                ]
            },
            "MeetingUpdate": {
                "required": [
                    "serviceBodyId",
                    "formatIds",
                    "venueType",
                    "day",
                    "startTime",
                    "duration",
                    "latitude",
                    "longitude",
                    "published",
                    "name"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MeetingBase"
                    }
                ]
            },
            "MeetingPartialUpdate": {
                "required": [
                    "serviceBodyId",
                    "formatIds",
                    "venueType",
                    "day",
                    "startTime",
                    "duration",
                    "latitude",
                    "longitude",
                    "published",
                    "name"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/MeetingBase"
                    }
                ]
            },
            "MeetingCollection": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Meeting"
                }
            },
            "RootServerBase": {
                "properties": {
                    "sourceId": {
                        "type": "integer",
                        "example": "0"
                    },
                    "name": {
                        "type": "string",
                        "example": "string"
                    },
                    "url": {
                        "type": "string",
                        "example": "https://example.com/main_server"
                    },
                    "statistics": {
                        "required": [
                            "serviceBodies",
                            "meetings"
                        ],
                        "properties": {
                            "serviceBodies": {
                                "required": [
                                    "numZones",
                                    "numRegions",
                                    "numAreas",
                                    "numGroups"
                                ],
                                "properties": {
                                    "numZones": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "numRegions": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "numAreas": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "numGroups": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            },
                            "meetings": {
                                "required": [
                                    "numTotal",
                                    "numInPerson",
                                    "numVirtual",
                                    "numHybrid",
                                    "numUnknown"
                                ],
                                "properties": {
                                    "numTotal": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "numInPerson": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "numVirtual": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "numHybrid": {
                                        "type": "integer",
                                        "example": "0"
                                    },
                                    "numUnknown": {
                                        "type": "integer",
                                        "example": "0"
                                    }
                                },
                                "type": "object"
                            }
                        },
                        "type": "object"
                    },
                    "serverInfo": {
                        "type": "string",
                        "example": "string"
                    },
                    "lastSuccessfulImport": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-11-25 04:16:26"
                    }
                },
                "type": "object"
            },
            "RootServer": {
                "required": [
                    "id",
                    "sourceId",
                    "name",
                    "url",
                    "lastSuccessfulImport"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RootServerBase"
                    },
                    {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": "0"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "RootServerCollection": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/RootServer"
                }
            },
            "ServiceBodyBase": {
                "properties": {
                    "parentId": {
                        "type": "integer",
                        "example": "0"
                    },
                    "name": {
                        "type": "string",
                        "example": "string"
                    },
                    "description": {
                        "type": "string",
                        "example": "string"
                    },
                    "type": {
                        "type": "string",
                        "example": "string"
                    },
                    "adminUserId": {
                        "type": "integer",
                        "example": "0"
                    },
                    "assignedUserIds": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "example": "0"
                        }
                    },
                    "url": {
                        "type": "string",
                        "example": "string"
                    },
                    "helpline": {
                        "type": "string",
                        "example": "string"
                    },
                    "email": {
                        "type": "string",
                        "example": "string"
                    },
                    "worldId": {
                        "type": "string",
                        "example": "string"
                    }
                },
                "type": "object"
            },
            "ServiceBody": {
                "required": [
                    "id",
                    "parentId",
                    "name",
                    "description",
                    "type",
                    "adminUserId",
                    "assignedUserIds",
                    "url",
                    "helpline",
                    "email",
                    "worldId"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ServiceBodyBase"
                    },
                    {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": "0"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ServiceBodyCreate": {
                "required": [
                    "parentId",
                    "name",
                    "description",
                    "type",
                    "adminUserId",
                    "assignedUserIds"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ServiceBodyBase"
                    }
                ]
            },
            "ServiceBodyUpdate": {
                "required": [
                    "parentId",
                    "name",
                    "description",
                    "type",
                    "adminUserId",
                    "assignedUserIds"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ServiceBodyBase"
                    }
                ]
            },
            "ServiceBodyPartialUpdate": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ServiceBodyBase"
                    }
                ]
            },
            "ServiceBodyCollection": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/ServiceBody"
                }
            },
            "Token": {
                "required": [
                    "access_token",
                    "expires_at",
                    "token_type",
                    "user_id"
                ],
                "properties": {
                    "access_token": {
                        "type": "string",
                        "example": "2|tR6PIqa8tiBJWMu4zyb3qw4eECuERjLd7xeLKgBu"
                    },
                    "expires_at": {
                        "type": "integer",
                        "example": "1667342171"
                    },
                    "token_type": {
                        "type": "string",
                        "example": "bearer"
                    },
                    "user_id": {
                        "type": "integer",
                        "example": "1"
                    }
                },
                "type": "object"
            },
            "TokenCredentials": {
                "required": [
                    "username",
                    "password"
                ],
                "properties": {
                    "username": {
                        "type": "string",
                        "format": "username",
                        "example": "MyUsername"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "example": "PassWord12345"
                    }
                },
                "type": "object"
            },
            "UserBase": {
                "properties": {
                    "username": {
                        "type": "string",
                        "example": "string"
                    },
                    "type": {
                        "type": "string",
                        "example": "string"
                    },
                    "displayName": {
                        "type": "string",
                        "example": "string"
                    },
                    "description": {
                        "type": "string",
                        "example": "string"
                    },
                    "email": {
                        "type": "string",
                        "example": "string"
                    },
                    "ownerId": {
                        "type": "integer",
                        "example": "0"
                    }
                },
                "type": "object"
            },
            "User": {
                "required": [
                    "id",
                    "username",
                    "type",
                    "displayName",
                    "description",
                    "email",
                    "ownerId"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/UserBase"
                    },
                    {
                        "properties": {
                            "id": {
                                "type": "integer",
                                "example": "0"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "UserCreate": {
                "required": [
                    "username",
                    "password",
                    "type",
                    "displayName"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/UserBase"
                    },
                    {
                        "properties": {
                            "password": {
                                "type": "string",
                                "example": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "UserUpdate": {
                "required": [
                    "username",
                    "type",
                    "displayName"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/UserBase"
                    },
                    {
                        "properties": {
                            "password": {
                                "type": "string",
                                "example": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "UserPartialUpdate": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/UserBase"
                    },
                    {
                        "properties": {
                            "password": {
                                "type": "string",
                                "example": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "UserCollection": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/User"
                }
            }
        },
        "securitySchemes": {
            "bmltToken": {
                "type": "oauth2",
                "flows": {
                    "password": {
                        "tokenUrl": "api/v1/auth/token",
                        "refreshUrl": "api/v1/auth/refresh",
                        "scopes": {}
                    }
                }
            }
        }
    }
}