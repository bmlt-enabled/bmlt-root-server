/* tslint:disable */
/* eslint-disable */
/**
 * BMLT
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorIncorrectCredentials,
  ErrorUnauthenticated,
  ErrorUnauthorized,
  Format,
  FormatCreate,
  FormatPartialUpdate,
  FormatUpdate,
  Meeting,
  MeetingCreate,
  MeetingPartialUpdate,
  MeetingUpdate,
  NoFormatExists,
  NoMeetingExists,
  NoServiceBodyExists,
  NoUserExists,
  ServiceBody,
  ServiceBodyCreate,
  ServiceBodyPartialUpdate,
  ServiceBodyUpdate,
  Token,
  TokenCredentials,
  User,
  UserCreate,
  UserPartialUpdate,
  UserUpdate,
  ValidationError,
} from '../models';
import {
    ErrorIncorrectCredentialsFromJSON,
    ErrorIncorrectCredentialsToJSON,
    ErrorUnauthenticatedFromJSON,
    ErrorUnauthenticatedToJSON,
    ErrorUnauthorizedFromJSON,
    ErrorUnauthorizedToJSON,
    FormatFromJSON,
    FormatToJSON,
    FormatCreateFromJSON,
    FormatCreateToJSON,
    FormatPartialUpdateFromJSON,
    FormatPartialUpdateToJSON,
    FormatUpdateFromJSON,
    FormatUpdateToJSON,
    MeetingFromJSON,
    MeetingToJSON,
    MeetingCreateFromJSON,
    MeetingCreateToJSON,
    MeetingPartialUpdateFromJSON,
    MeetingPartialUpdateToJSON,
    MeetingUpdateFromJSON,
    MeetingUpdateToJSON,
    NoFormatExistsFromJSON,
    NoFormatExistsToJSON,
    NoMeetingExistsFromJSON,
    NoMeetingExistsToJSON,
    NoServiceBodyExistsFromJSON,
    NoServiceBodyExistsToJSON,
    NoUserExistsFromJSON,
    NoUserExistsToJSON,
    ServiceBodyFromJSON,
    ServiceBodyToJSON,
    ServiceBodyCreateFromJSON,
    ServiceBodyCreateToJSON,
    ServiceBodyPartialUpdateFromJSON,
    ServiceBodyPartialUpdateToJSON,
    ServiceBodyUpdateFromJSON,
    ServiceBodyUpdateToJSON,
    TokenFromJSON,
    TokenToJSON,
    TokenCredentialsFromJSON,
    TokenCredentialsToJSON,
    UserFromJSON,
    UserToJSON,
    UserCreateFromJSON,
    UserCreateToJSON,
    UserPartialUpdateFromJSON,
    UserPartialUpdateToJSON,
    UserUpdateFromJSON,
    UserUpdateToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface AuthTokenRequest {
    tokenCredentials: TokenCredentials;
}

export interface CreateFormatRequest {
    formatCreate: FormatCreate;
}

export interface CreateMeetingRequest {
    meetingCreate: MeetingCreate;
}

export interface CreateServiceBodyRequest {
    serviceBodyCreate: ServiceBodyCreate;
}

export interface CreateUserRequest {
    userCreate: UserCreate;
}

export interface DeleteFormatRequest {
    formatId: number;
}

export interface DeleteMeetingRequest {
    meetingId: number;
}

export interface DeleteServiceBodyRequest {
    serviceBodyId: number;
}

export interface DeleteUserRequest {
    userId: number;
}

export interface GetFormatRequest {
    formatId: number;
}

export interface GetMeetingRequest {
    meetingId: number;
}

export interface GetMeetingsRequest {
    meetingIds?: string;
    days?: string;
    serviceBodyIds?: string;
    searchString?: string;
}

export interface GetServiceBodyRequest {
    serviceBodyId: number;
}

export interface GetUserRequest {
    userId: number;
}

export interface PartialUpdateUserRequest {
    userId: number;
    userPartialUpdate: UserPartialUpdate;
}

export interface PatchFormatRequest {
    formatId: number;
    formatPartialUpdate: FormatPartialUpdate;
}

export interface PatchMeetingRequest {
    meetingId: number;
    meetingPartialUpdate: MeetingPartialUpdate;
}

export interface PatchServiceBodyRequest {
    serviceBodyId: number;
    serviceBodyPartialUpdate: ServiceBodyPartialUpdate;
}

export interface UpdateFormatRequest {
    formatId: number;
    formatUpdate: FormatUpdate;
}

export interface UpdateMeetingRequest {
    meetingId: number;
    meetingUpdate: MeetingUpdate;
}

export interface UpdateServiceBodyRequest {
    serviceBodyId: number;
    serviceBodyUpdate: ServiceBodyUpdate;
}

export interface UpdateUserRequest {
    userId: number;
    userUpdate: UserUpdate;
}

/**
 * 
 */
export class RootServerApi extends runtime.BaseAPI {

    /**
     * Revoke token and logout.
     * Revokes a token
     */
    async authLogoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revoke token and logout.
     * Revokes a token
     */
    async authLogout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authLogoutRaw(initOverrides);
    }

    /**
     * Refresh token.
     * Revokes and issues a new token
     */
    async authRefreshRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Refresh token.
     * Revokes and issues a new token
     */
    async authRefresh(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.authRefreshRaw(initOverrides);
        return await response.value();
    }

    /**
     * Exchange credentials for a new token
     * Creates a token
     */
    async authTokenRaw(requestParameters: AuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.tokenCredentials === null || requestParameters.tokenCredentials === undefined) {
            throw new runtime.RequiredError('tokenCredentials','Required parameter requestParameters.tokenCredentials was null or undefined when calling authToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenCredentialsToJSON(requestParameters.tokenCredentials),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Exchange credentials for a new token
     * Creates a token
     */
    async authToken(requestParameters: AuthTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.authTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a format.
     * Creates a format
     */
    async createFormatRaw(requestParameters: CreateFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Format>> {
        if (requestParameters.formatCreate === null || requestParameters.formatCreate === undefined) {
            throw new runtime.RequiredError('formatCreate','Required parameter requestParameters.formatCreate was null or undefined when calling createFormat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/formats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormatCreateToJSON(requestParameters.formatCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormatFromJSON(jsonValue));
    }

    /**
     * Creates a format.
     * Creates a format
     */
    async createFormat(requestParameters: CreateFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Format> {
        const response = await this.createFormatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a meeting.
     * Creates a meeting
     */
    async createMeetingRaw(requestParameters: CreateMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Meeting>> {
        if (requestParameters.meetingCreate === null || requestParameters.meetingCreate === undefined) {
            throw new runtime.RequiredError('meetingCreate','Required parameter requestParameters.meetingCreate was null or undefined when calling createMeeting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/meetings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MeetingCreateToJSON(requestParameters.meetingCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingFromJSON(jsonValue));
    }

    /**
     * Creates a meeting.
     * Creates a meeting
     */
    async createMeeting(requestParameters: CreateMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Meeting> {
        const response = await this.createMeetingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a service body.
     * Creates a service body
     */
    async createServiceBodyRaw(requestParameters: CreateServiceBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceBody>> {
        if (requestParameters.serviceBodyCreate === null || requestParameters.serviceBodyCreate === undefined) {
            throw new runtime.RequiredError('serviceBodyCreate','Required parameter requestParameters.serviceBodyCreate was null or undefined when calling createServiceBody.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/servicebodies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceBodyCreateToJSON(requestParameters.serviceBodyCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceBodyFromJSON(jsonValue));
    }

    /**
     * Creates a service body.
     * Creates a service body
     */
    async createServiceBody(requestParameters: CreateServiceBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceBody> {
        const response = await this.createServiceBodyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a user.
     * Creates a user
     */
    async createUserRaw(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userCreate === null || requestParameters.userCreate === undefined) {
            throw new runtime.RequiredError('userCreate','Required parameter requestParameters.userCreate was null or undefined when calling createUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters.userCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Creates a user.
     * Creates a user
     */
    async createUser(requestParameters: CreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.createUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a format by id.
     * Deletes a format
     */
    async deleteFormatRaw(requestParameters: DeleteFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.formatId === null || requestParameters.formatId === undefined) {
            throw new runtime.RequiredError('formatId','Required parameter requestParameters.formatId was null or undefined when calling deleteFormat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/formats/{formatId}`.replace(`{${"formatId"}}`, encodeURIComponent(String(requestParameters.formatId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a format by id.
     * Deletes a format
     */
    async deleteFormat(requestParameters: DeleteFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFormatRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a meeting by id.
     * Deletes a meeting
     */
    async deleteMeetingRaw(requestParameters: DeleteMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.meetingId === null || requestParameters.meetingId === undefined) {
            throw new runtime.RequiredError('meetingId','Required parameter requestParameters.meetingId was null or undefined when calling deleteMeeting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/meetings/{meetingId}`.replace(`{${"meetingId"}}`, encodeURIComponent(String(requestParameters.meetingId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a meeting by id.
     * Deletes a meeting
     */
    async deleteMeeting(requestParameters: DeleteMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMeetingRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a service body by id.
     * Deletes a service body
     */
    async deleteServiceBodyRaw(requestParameters: DeleteServiceBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.serviceBodyId === null || requestParameters.serviceBodyId === undefined) {
            throw new runtime.RequiredError('serviceBodyId','Required parameter requestParameters.serviceBodyId was null or undefined when calling deleteServiceBody.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/servicebodies/{serviceBodyId}`.replace(`{${"serviceBodyId"}}`, encodeURIComponent(String(requestParameters.serviceBodyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a service body by id.
     * Deletes a service body
     */
    async deleteServiceBody(requestParameters: DeleteServiceBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteServiceBodyRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a user by id
     * Deletes a user
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling deleteUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a user by id
     * Deletes a user
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve a format
     * Retrieves a format
     */
    async getFormatRaw(requestParameters: GetFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Format>> {
        if (requestParameters.formatId === null || requestParameters.formatId === undefined) {
            throw new runtime.RequiredError('formatId','Required parameter requestParameters.formatId was null or undefined when calling getFormat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/formats/{formatId}`.replace(`{${"formatId"}}`, encodeURIComponent(String(requestParameters.formatId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormatFromJSON(jsonValue));
    }

    /**
     * Retrieve a format
     * Retrieves a format
     */
    async getFormat(requestParameters: GetFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Format> {
        const response = await this.getFormatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve formats
     * Retrieves formats
     */
    async getFormatsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Format>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/formats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FormatFromJSON));
    }

    /**
     * Retrieve formats
     * Retrieves formats
     */
    async getFormats(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Format>> {
        const response = await this.getFormatsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a meeting.
     * Retrieves a meeting
     */
    async getMeetingRaw(requestParameters: GetMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Meeting>> {
        if (requestParameters.meetingId === null || requestParameters.meetingId === undefined) {
            throw new runtime.RequiredError('meetingId','Required parameter requestParameters.meetingId was null or undefined when calling getMeeting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/meetings/{meetingId}`.replace(`{${"meetingId"}}`, encodeURIComponent(String(requestParameters.meetingId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingFromJSON(jsonValue));
    }

    /**
     * Retrieve a meeting.
     * Retrieves a meeting
     */
    async getMeeting(requestParameters: GetMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Meeting> {
        const response = await this.getMeetingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve meetings for authenticated user.
     * Retrieves meetings
     */
    async getMeetingsRaw(requestParameters: GetMeetingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Meeting>>> {
        const queryParameters: any = {};

        if (requestParameters.meetingIds !== undefined) {
            queryParameters['meetingIds'] = requestParameters.meetingIds;
        }

        if (requestParameters.days !== undefined) {
            queryParameters['days'] = requestParameters.days;
        }

        if (requestParameters.serviceBodyIds !== undefined) {
            queryParameters['serviceBodyIds'] = requestParameters.serviceBodyIds;
        }

        if (requestParameters.searchString !== undefined) {
            queryParameters['searchString'] = requestParameters.searchString;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/meetings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MeetingFromJSON));
    }

    /**
     * Retrieve meetings for authenticated user.
     * Retrieves meetings
     */
    async getMeetings(requestParameters: GetMeetingsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Meeting>> {
        const response = await this.getMeetingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve service bodies for authenticated user.
     * Retrieves service bodies
     */
    async getServiceBodiesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceBody>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/servicebodies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceBodyFromJSON));
    }

    /**
     * Retrieve service bodies for authenticated user.
     * Retrieves service bodies
     */
    async getServiceBodies(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceBody>> {
        const response = await this.getServiceBodiesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a single service body by id.
     * Retrieves a service body
     */
    async getServiceBodyRaw(requestParameters: GetServiceBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceBody>> {
        if (requestParameters.serviceBodyId === null || requestParameters.serviceBodyId === undefined) {
            throw new runtime.RequiredError('serviceBodyId','Required parameter requestParameters.serviceBodyId was null or undefined when calling getServiceBody.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/servicebodies/{serviceBodyId}`.replace(`{${"serviceBodyId"}}`, encodeURIComponent(String(requestParameters.serviceBodyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceBodyFromJSON(jsonValue));
    }

    /**
     * Retrieve a single service body by id.
     * Retrieves a service body
     */
    async getServiceBody(requestParameters: GetServiceBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceBody> {
        const response = await this.getServiceBodyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve single user.
     * Retrieves a single user
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Retrieve single user.
     * Retrieves a single user
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve users for authenticated user.
     * Retrieves users
     */
    async getUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     * Retrieve users for authenticated user.
     * Retrieves users
     */
    async getUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<User>> {
        const response = await this.getUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Patches a user by id.
     * Patches a user
     */
    async partialUpdateUserRaw(requestParameters: PartialUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling partialUpdateUser.');
        }

        if (requestParameters.userPartialUpdate === null || requestParameters.userPartialUpdate === undefined) {
            throw new runtime.RequiredError('userPartialUpdate','Required parameter requestParameters.userPartialUpdate was null or undefined when calling partialUpdateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserPartialUpdateToJSON(requestParameters.userPartialUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Patches a user by id.
     * Patches a user
     */
    async partialUpdateUser(requestParameters: PartialUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.partialUpdateUserRaw(requestParameters, initOverrides);
    }

    /**
     * Patches a single format by id.
     * Patches a format
     */
    async patchFormatRaw(requestParameters: PatchFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.formatId === null || requestParameters.formatId === undefined) {
            throw new runtime.RequiredError('formatId','Required parameter requestParameters.formatId was null or undefined when calling patchFormat.');
        }

        if (requestParameters.formatPartialUpdate === null || requestParameters.formatPartialUpdate === undefined) {
            throw new runtime.RequiredError('formatPartialUpdate','Required parameter requestParameters.formatPartialUpdate was null or undefined when calling patchFormat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/formats/{formatId}`.replace(`{${"formatId"}}`, encodeURIComponent(String(requestParameters.formatId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: FormatPartialUpdateToJSON(requestParameters.formatPartialUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Patches a single format by id.
     * Patches a format
     */
    async patchFormat(requestParameters: PatchFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchFormatRaw(requestParameters, initOverrides);
    }

    /**
     * Patches a meeting by id
     * Patches a meeting
     */
    async patchMeetingRaw(requestParameters: PatchMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.meetingId === null || requestParameters.meetingId === undefined) {
            throw new runtime.RequiredError('meetingId','Required parameter requestParameters.meetingId was null or undefined when calling patchMeeting.');
        }

        if (requestParameters.meetingPartialUpdate === null || requestParameters.meetingPartialUpdate === undefined) {
            throw new runtime.RequiredError('meetingPartialUpdate','Required parameter requestParameters.meetingPartialUpdate was null or undefined when calling patchMeeting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/meetings/{meetingId}`.replace(`{${"meetingId"}}`, encodeURIComponent(String(requestParameters.meetingId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MeetingPartialUpdateToJSON(requestParameters.meetingPartialUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Patches a meeting by id
     * Patches a meeting
     */
    async patchMeeting(requestParameters: PatchMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchMeetingRaw(requestParameters, initOverrides);
    }

    /**
     * Patches a single service body by id.
     * Patches a service body
     */
    async patchServiceBodyRaw(requestParameters: PatchServiceBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.serviceBodyId === null || requestParameters.serviceBodyId === undefined) {
            throw new runtime.RequiredError('serviceBodyId','Required parameter requestParameters.serviceBodyId was null or undefined when calling patchServiceBody.');
        }

        if (requestParameters.serviceBodyPartialUpdate === null || requestParameters.serviceBodyPartialUpdate === undefined) {
            throw new runtime.RequiredError('serviceBodyPartialUpdate','Required parameter requestParameters.serviceBodyPartialUpdate was null or undefined when calling patchServiceBody.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/servicebodies/{serviceBodyId}`.replace(`{${"serviceBodyId"}}`, encodeURIComponent(String(requestParameters.serviceBodyId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceBodyPartialUpdateToJSON(requestParameters.serviceBodyPartialUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Patches a single service body by id.
     * Patches a service body
     */
    async patchServiceBody(requestParameters: PatchServiceBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.patchServiceBodyRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a format.
     * Updates a format
     */
    async updateFormatRaw(requestParameters: UpdateFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.formatId === null || requestParameters.formatId === undefined) {
            throw new runtime.RequiredError('formatId','Required parameter requestParameters.formatId was null or undefined when calling updateFormat.');
        }

        if (requestParameters.formatUpdate === null || requestParameters.formatUpdate === undefined) {
            throw new runtime.RequiredError('formatUpdate','Required parameter requestParameters.formatUpdate was null or undefined when calling updateFormat.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/formats/{formatId}`.replace(`{${"formatId"}}`, encodeURIComponent(String(requestParameters.formatId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FormatUpdateToJSON(requestParameters.formatUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a format.
     * Updates a format
     */
    async updateFormat(requestParameters: UpdateFormatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateFormatRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a meeting.
     * Updates a meeting
     */
    async updateMeetingRaw(requestParameters: UpdateMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.meetingId === null || requestParameters.meetingId === undefined) {
            throw new runtime.RequiredError('meetingId','Required parameter requestParameters.meetingId was null or undefined when calling updateMeeting.');
        }

        if (requestParameters.meetingUpdate === null || requestParameters.meetingUpdate === undefined) {
            throw new runtime.RequiredError('meetingUpdate','Required parameter requestParameters.meetingUpdate was null or undefined when calling updateMeeting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/meetings/{meetingId}`.replace(`{${"meetingId"}}`, encodeURIComponent(String(requestParameters.meetingId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MeetingUpdateToJSON(requestParameters.meetingUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a meeting.
     * Updates a meeting
     */
    async updateMeeting(requestParameters: UpdateMeetingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateMeetingRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a single service body.
     * Updates a Service Body
     */
    async updateServiceBodyRaw(requestParameters: UpdateServiceBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.serviceBodyId === null || requestParameters.serviceBodyId === undefined) {
            throw new runtime.RequiredError('serviceBodyId','Required parameter requestParameters.serviceBodyId was null or undefined when calling updateServiceBody.');
        }

        if (requestParameters.serviceBodyUpdate === null || requestParameters.serviceBodyUpdate === undefined) {
            throw new runtime.RequiredError('serviceBodyUpdate','Required parameter requestParameters.serviceBodyUpdate was null or undefined when calling updateServiceBody.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/servicebodies/{serviceBodyId}`.replace(`{${"serviceBodyId"}}`, encodeURIComponent(String(requestParameters.serviceBodyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceBodyUpdateToJSON(requestParameters.serviceBodyUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a single service body.
     * Updates a Service Body
     */
    async updateServiceBody(requestParameters: UpdateServiceBodyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateServiceBodyRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a user.
     * Update single user
     */
    async updateUserRaw(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUser.');
        }

        if (requestParameters.userUpdate === null || requestParameters.userUpdate === undefined) {
            throw new runtime.RequiredError('userUpdate','Required parameter requestParameters.userUpdate was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("bmltToken", []);
        }

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateToJSON(requestParameters.userUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a user.
     * Update single user
     */
    async updateUser(requestParameters: UpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateUserRaw(requestParameters, initOverrides);
    }

}
