/* tslint:disable */
/* eslint-disable */
/**
 * BMLT
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ServiceBodyCreate
 */
export interface ServiceBodyCreate {
    /**
     * 
     * @type {number}
     * @memberof ServiceBodyCreate
     */
    parentId: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyCreate
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyCreate
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyCreate
     */
    type: string;
    /**
     * 
     * @type {number}
     * @memberof ServiceBodyCreate
     */
    adminUserId: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof ServiceBodyCreate
     */
    assignedUserIds: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyCreate
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyCreate
     */
    helpline?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyCreate
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceBodyCreate
     */
    worldId?: string;
}

/**
 * Check if a given object implements the ServiceBodyCreate interface.
 */
export function instanceOfServiceBodyCreate(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "parentId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "adminUserId" in value;
    isInstance = isInstance && "assignedUserIds" in value;

    return isInstance;
}

export function ServiceBodyCreateFromJSON(json: any): ServiceBodyCreate {
    return ServiceBodyCreateFromJSONTyped(json, false);
}

export function ServiceBodyCreateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceBodyCreate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parentId': json['parentId'],
        'name': json['name'],
        'description': json['description'],
        'type': json['type'],
        'adminUserId': json['adminUserId'],
        'assignedUserIds': json['assignedUserIds'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'helpline': !exists(json, 'helpline') ? undefined : json['helpline'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'worldId': !exists(json, 'worldId') ? undefined : json['worldId'],
    };
}

export function ServiceBodyCreateToJSON(value?: ServiceBodyCreate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parentId': value.parentId,
        'name': value.name,
        'description': value.description,
        'type': value.type,
        'adminUserId': value.adminUserId,
        'assignedUserIds': value.assignedUserIds,
        'url': value.url,
        'helpline': value.helpline,
        'email': value.email,
        'worldId': value.worldId,
    };
}

