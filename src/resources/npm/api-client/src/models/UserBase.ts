/* tslint:disable */
/* eslint-disable */
/**
 * BMLT
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserBase
 */
export interface UserBase {
    /**
     * 
     * @type {string}
     * @memberof UserBase
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof UserBase
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof UserBase
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserBase
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof UserBase
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserBase
     */
    ownerId?: string;
}

/**
 * Check if a given object implements the UserBase interface.
 */
export function instanceOfUserBase(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserBaseFromJSON(json: any): UserBase {
    return UserBaseFromJSONTyped(json, false);
}

export function UserBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'username': !exists(json, 'username') ? undefined : json['username'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
    };
}

export function UserBaseToJSON(value?: UserBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'username': value.username,
        'type': value.type,
        'displayName': value.displayName,
        'description': value.description,
        'email': value.email,
        'ownerId': value.ownerId,
    };
}

