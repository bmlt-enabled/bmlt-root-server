/* tslint:disable */
/* eslint-disable */
/**
 * BMLT
 * BMLT Admin API Documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MeetingBase
 */
export interface MeetingBase {
    /**
     * 
     * @type {number}
     * @memberof MeetingBase
     */
    serviceBodyId?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof MeetingBase
     */
    formatIds?: Array<number>;
    /**
     * 
     * @type {number}
     * @memberof MeetingBase
     */
    venueType?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MeetingBase
     */
    temporarilyVirtual?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MeetingBase
     */
    day?: number;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    startTime?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    duration?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    timeZone?: string;
    /**
     * 
     * @type {number}
     * @memberof MeetingBase
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof MeetingBase
     */
    longitude?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MeetingBase
     */
    published?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    worldId?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    locationText?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    locationInfo?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    locationStreet?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    locationNeighborhood?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    locationCitySubsection?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    locationMunicipality?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    locationSubProvince?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    locationProvince?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    locationPostalCode1?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    locationNation?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    phoneMeetingNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    virtualMeetingLink?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    virtualMeetingAdditionalInfo?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    contactName1?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    contactName2?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    contactPhone1?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    contactPhone2?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    contactEmail1?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    contactEmail2?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    busLines?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    trainLine?: string;
    /**
     * 
     * @type {string}
     * @memberof MeetingBase
     */
    comments?: string;
}

/**
 * Check if a given object implements the MeetingBase interface.
 */
export function instanceOfMeetingBase(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MeetingBaseFromJSON(json: any): MeetingBase {
    return MeetingBaseFromJSONTyped(json, false);
}

export function MeetingBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeetingBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'serviceBodyId': !exists(json, 'serviceBodyId') ? undefined : json['serviceBodyId'],
        'formatIds': !exists(json, 'formatIds') ? undefined : json['formatIds'],
        'venueType': !exists(json, 'venueType') ? undefined : json['venueType'],
        'temporarilyVirtual': !exists(json, 'temporarilyVirtual') ? undefined : json['temporarilyVirtual'],
        'day': !exists(json, 'day') ? undefined : json['day'],
        'startTime': !exists(json, 'startTime') ? undefined : json['startTime'],
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'timeZone': !exists(json, 'timeZone') ? undefined : json['timeZone'],
        'latitude': !exists(json, 'latitude') ? undefined : json['latitude'],
        'longitude': !exists(json, 'longitude') ? undefined : json['longitude'],
        'published': !exists(json, 'published') ? undefined : json['published'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'worldId': !exists(json, 'worldId') ? undefined : json['worldId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'locationText': !exists(json, 'location_text') ? undefined : json['location_text'],
        'locationInfo': !exists(json, 'location_info') ? undefined : json['location_info'],
        'locationStreet': !exists(json, 'location_street') ? undefined : json['location_street'],
        'locationNeighborhood': !exists(json, 'location_neighborhood') ? undefined : json['location_neighborhood'],
        'locationCitySubsection': !exists(json, 'location_city_subsection') ? undefined : json['location_city_subsection'],
        'locationMunicipality': !exists(json, 'location_municipality') ? undefined : json['location_municipality'],
        'locationSubProvince': !exists(json, 'location_sub_province') ? undefined : json['location_sub_province'],
        'locationProvince': !exists(json, 'location_province') ? undefined : json['location_province'],
        'locationPostalCode1': !exists(json, 'location_postal_code_1') ? undefined : json['location_postal_code_1'],
        'locationNation': !exists(json, 'location_nation') ? undefined : json['location_nation'],
        'phoneMeetingNumber': !exists(json, 'phone_meeting_number') ? undefined : json['phone_meeting_number'],
        'virtualMeetingLink': !exists(json, 'virtual_meeting_link') ? undefined : json['virtual_meeting_link'],
        'virtualMeetingAdditionalInfo': !exists(json, 'virtual_meeting_additional_info') ? undefined : json['virtual_meeting_additional_info'],
        'contactName1': !exists(json, 'contact_name_1') ? undefined : json['contact_name_1'],
        'contactName2': !exists(json, 'contact_name_2') ? undefined : json['contact_name_2'],
        'contactPhone1': !exists(json, 'contact_phone_1') ? undefined : json['contact_phone_1'],
        'contactPhone2': !exists(json, 'contact_phone_2') ? undefined : json['contact_phone_2'],
        'contactEmail1': !exists(json, 'contact_email_1') ? undefined : json['contact_email_1'],
        'contactEmail2': !exists(json, 'contact_email_2') ? undefined : json['contact_email_2'],
        'busLines': !exists(json, 'bus_lines') ? undefined : json['bus_lines'],
        'trainLine': !exists(json, 'train_line') ? undefined : json['train_line'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
    };
}

export function MeetingBaseToJSON(value?: MeetingBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'serviceBodyId': value.serviceBodyId,
        'formatIds': value.formatIds,
        'venueType': value.venueType,
        'temporarilyVirtual': value.temporarilyVirtual,
        'day': value.day,
        'startTime': value.startTime,
        'duration': value.duration,
        'timeZone': value.timeZone,
        'latitude': value.latitude,
        'longitude': value.longitude,
        'published': value.published,
        'email': value.email,
        'worldId': value.worldId,
        'name': value.name,
        'location_text': value.locationText,
        'location_info': value.locationInfo,
        'location_street': value.locationStreet,
        'location_neighborhood': value.locationNeighborhood,
        'location_city_subsection': value.locationCitySubsection,
        'location_municipality': value.locationMunicipality,
        'location_sub_province': value.locationSubProvince,
        'location_province': value.locationProvince,
        'location_postal_code_1': value.locationPostalCode1,
        'location_nation': value.locationNation,
        'phone_meeting_number': value.phoneMeetingNumber,
        'virtual_meeting_link': value.virtualMeetingLink,
        'virtual_meeting_additional_info': value.virtualMeetingAdditionalInfo,
        'contact_name_1': value.contactName1,
        'contact_name_2': value.contactName2,
        'contact_phone_1': value.contactPhone1,
        'contact_phone_2': value.contactPhone2,
        'contact_email_1': value.contactEmail1,
        'contact_email_2': value.contactEmail2,
        'bus_lines': value.busLines,
        'train_line': value.trainLine,
        'comments': value.comments,
    };
}

